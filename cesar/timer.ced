 
;
;**************************************************************************************************
;
;	Programa de demonstra��o de uso da interrup��o do timer
;
;	Utiliza a interrup��o de timer para atualizar um rel�gio de minuttos e segundos no visor.
;
;**************************************************************************************************
;


;==========================================================================
; �rea Reservada

; Acesso em 16 bits
		org		hff80
STACK:
		daw		[31]		; �rea reservada
IVET:	dw		0			; Vetor de interrup��o

; Acesso em 8 bits
		dab		[23]
TIMDT:	db		0		; Base de tempo do timer
INTS:	db		0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0		; Status do teclado
TECDT:	db		0		; Dado do teclado
VISOR:	dab		[36]	; Portas de acesso ao visor


;==========================================================
; In�cio do Programa Principal
	org		0

;	Inicializa o processador e o hardware
	mov		#STACK,r6
	
	clr		INTS			; Reset pedidos de interrup��o
	clr		TECST			; Reset estado do hardware do teclado
	mov		#isr,IVET		; Set Interrupt Service Rotine
	mov		#100,TIMDT		; Set timer para interromper a cada 100ms
		
;	Inicializa rel�gio
	mov		#4,r0
	mov		#Relogio,r1
loop_relogio:
	clr		(r1)+
	sob		r0,loop_relogio
	
;	Limpa o visor
	mov		#36,r0
	mov		#VISOR,r1
loop_reset:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset
		
;==========================================================================
;	Programa principal
;	Respons�vel por atualizar a informa��o do rel�gio no visor.
main:
	mov		#h81,INTE
loop_main:

	; Coloca o Relogio no visor
	mov		Hora,r0
	mov		#VISOR,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+2

	mov		Minuto,r0
	mov		#VISOR+3,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+5

	mov		Segundo,r0
	mov		#VISOR+6,r1
	jsr		r7,dspDec

	br		loop_main

;--------------------------------------------------------------------------
;	Coloca um n�mero de 2 digitos no visor
;	r0 -> valor
;	r1 -> posi��o no visor
dspDec:
	clr		r2
dspDec_2:
	cmp		r0,#10
	blt		dspDec_1
	sub		#10,r0
	inc		r2
	br		dspDec_2
dspDec_1:
	add		#'0',r2
	add		#'0',r0
	mov		r2,(r1)
	inc		r1
	mov		r0,(r1)
	rts		r7
		
;--------------------------------------------------------------------------
;	O rel�gio � formado por 6 palavras, cada uma representando uma parte do rel�gio.
Relogio:
Hora:		dw	0
Minuto:		dw	0
Segundo:	dw	0
Decimos:	dw	0


;==========================================================================
; Rotina de INTERRUP��O
isr:
	mov		r0,-(r6)	; Salva registradores (n�o � necess�rio salvar o R5)
	mov		r1,-(r6)
	mov		r2,-(r6)
	mov		r3,-(r6)
	mov		r4,-(r6)
	mov		r5,-(r6)

	mov		INTS,r0		; Verifica se � INT do TIMER
	and		#1,r0
	beq		ISR2
	jsr		r7,ISRtim	; Tratamento da INT do TIMER
	and		#hFFFE,INTS	; Desliga bit de INT TIMER
ISR2:

	mov		(r6)+,r5	; Retorna os registradores da pilha
	mov		(r6)+,r4
	mov		(r6)+,r3
	mov		(r6)+,r2
	mov		(r6)+,r1
	mov		(r6)+,r0

	rti					; Return From Interrupt
	

;--------------------------------------------------------------------------
;	Tratamento das interrup��es de timer
;	if (++Decimos>=10) {
;		Decimos=0
;		if (++Segundo>=60) {
;			Segundo=0
;			if (++Minuto>=60) {
;				Minuto=0
;				if (++Hora>=24) {
;					Hora=0
;				}
;			}
;		}
;	}
ISRtim:
	inc		Decimos
	cmp		Decimos,#10
	blt		ISRtim_Fim
	clr		Decimos

	inc		Segundo
	cmp		Segundo,#60
	blt		ISRtim_Fim
	clr		Segundo

	inc		Minuto
	cmp		Minuto,#60
	blt		ISRtim_Fim
	clr		Minuto

	inc		Hora
	cmp		Hora,#24
	blt		ISRtim_Fim
	clr		Hora

ISRtim_Fim:
	rts		r7
	
		

		